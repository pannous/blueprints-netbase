package com.pannous.netbase.jdbc;

import com.pannous.netbase.blueprints.Debugger;
import com.pannous.netbase.blueprints.Netbase;
import com.pannous.netbase.blueprints.Node;

import java.sql.*;

/**
 * Copyright 2013 Pannous GmbH
 * <p/>
 * User: info@pannous.com / me
 * Date: 24/01/14
 * Time: 11:06
 */
public class NetbaseStatement implements Statement {
    private NetbaseResultSet resultSet;
    private final NetbaseConnection connection;
    private int maxFieldSize=Integer.MAX_VALUE;
    private int maxRows=100000;
    private int queryTimeoutInS =10;

    public NetbaseStatement(NetbaseConnection netbaseConnection) {
        connection=netbaseConnection;
    }

    @Override
    public ResultSet executeQuery(final String sql) throws SQLException {
        if(queryTimeoutInS>0){
        try {
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                Node[] nodes= Netbase.doExecute(sql);
                resultSet = new NetbaseResultSet(sql, nodes);
            }
        });
            thread.join(queryTimeoutInS*1000);
            thread.start();
        } catch (InterruptedException e) {
            Debugger.error(e);
            return resultSet;
        } catch (Exception e) {
            Debugger.error(e);
            throw new SQLException(e);
        }                     }
        else  {
            Node[] nodes = Netbase.doExecute(sql);
            resultSet = new NetbaseResultSet(sql, nodes);
        }
        return resultSet;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return executeQuery(sql).getMetaData().getColumnCount();
    }

    @Override
    public void close() throws SQLException {
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return maxFieldSize;
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        maxFieldSize = max;
    }

    @Override
    public int getMaxRows() throws SQLException {
        return maxRows;
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        maxRows = max;
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
                      //?
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return queryTimeoutInS;
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        queryTimeoutInS = seconds;
    }

    @Override
    public void cancel() throws SQLException {

    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    @Override
    public void clearWarnings() throws SQLException {

    }

    @Override
    public void setCursorName(String name) throws SQLException {

    }

    @Override
    public boolean execute(String sql) throws SQLException {
        resultSet = (NetbaseResultSet) executeQuery(sql);
        return resultSet!=null&& !resultSet.wasNull() && !resultSet.rowUpdated() &&!resultSet.rowDeleted() && resultSet.nodes.length!=0;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return resultSet;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return resultSet.nodes.length;
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return resultSet.next();// move?
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {

    }

    @Override
    public int getFetchDirection() throws SQLException {
        return 0;
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {

    }

    @Override
    public int getFetchSize() throws SQLException {
        return 0;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return 0;
    }

    @Override
    public int getResultSetType() throws SQLException {
        return 0;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        executeQuery(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return new int[0];
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return resultSet.next();//???
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return resultSet;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return executeUpdate(sql);//     autoGeneratedKeys
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return executeUpdate(sql);//     columnIndexes ??
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return executeUpdate(sql);//   select columnNames from update <sql>   columnNames Return all anyways
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return execute(sql);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return execute(sql);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return execute(sql);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return 0;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return false;
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {

    }

    @Override
    public boolean isPoolable() throws SQLException {
        return false;
    }

    @Override
    public void closeOnCompletion() throws SQLException {
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return null; // HUH?
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }
}
